{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Alerts.js","Components/AboutUs.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","About","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","backgroundColor","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLocaleLowerCase","document","getElementById","select","navigator","clipboard","writeText","replace","trim","border","split","length","defaultProps","Alerts","height","alert","class","msg","AboutUs","mystyle","App","setmode","setalert","message","setTimeout","body","exact","path","Heading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f2e259b9.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} `  }>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/About\"> {props.About} </Link>\r\n            </li>\r\n          </ul>\r\n\r\n          <div className={` form-check form-switch text-${props.mode==='light'?'dark':'light'}   `} >\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\"> {props.mode} mode</label>\r\n          </div>\r\n\r\n\r\n             \r\n        </div>\r\n      </div>\r\n    </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    About: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Text',\r\n    About: 'about'\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const [text, setText] = useState('');\r\n\r\n    const handleUpClick = () =>{\r\n        let newText=text.toUpperCase()\r\n        setText(newText)\r\n        props.showAlert('Converted to UpperCase')\r\n    }\r\n    const handleClear = () =>{\r\n        let newText=''\r\n        setText(newText)\r\n    }\r\n\r\n    const handleCopy = () =>{\r\n        let text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text coppied to clipboard\")\r\n    }\r\n\r\n    const handleDownClick = () =>{\r\n        let newText=text.toLocaleLowerCase()\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Lowercase\")\r\n    }\r\n\r\n    const handleSpaces = () =>{\r\n        let newText=text.replace(/\\s+/g, ' ').trim()\r\n        setText(newText)\r\n        props.showAlert(\"Extra spaces removed\")\r\n\r\n    }\r\n\r\n    const handleOnchange = (event) =>{\r\n        setText(event.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n    <>\r\n        <div className=\"container\" style={{ color: props.mode==='dark'?'white':'black' }} > \r\n            <div>\r\n                <h3 className=\"my-3\">Enter your text here</h3>\r\n\r\n                <div className=\"mb-1\">\r\n                    <label htmlFor=\"myBox\" className=\"form-label\"> </label>\r\n                    <textarea className=\"form-control\"  style={{backgroundColor: props.mode === 'dark'?'#222f43':'white', color: props.mode === 'dark'?'white':'black' }} value={text} onChange={handleOnchange} id=\"myBox\" rows=\"9\" ></textarea>\r\n                </div>\r\n\r\n                <button className=\"btn btn-success my-3 mx-2\"  onClick={handleUpClick}  >Convert to UpperCase</button>\r\n                <button className=\"btn btn-success my-3 mx-2\"  onClick={handleDownClick}  >Convert to LowerCase</button>\r\n                <button className=\"btn btn-success my-3 mx-2\"  onClick={handleCopy}  >Copy Text</button>\r\n                <button className=\"btn btn-success my-3 mx-2\"  onClick={handleClear}  >Clear Text</button>\r\n                <button className=\"btn btn-success my-3 mx-2\"  onClick={handleSpaces}  >Remove extra Spaces</button>\r\n\r\n\r\n\r\n\r\n            </div>\r\n\r\n            <div className=\"container my-3\" style={{border: props.mode==='dark'?'1px solid white':'3px solid black'}} >\r\n                <h4>Your text summary</h4>\r\n                <p> { text.replace(/\\s+/g, ' ').trim().split(' ').length} words and {text.replace(/\\s+/g, ' ').trim().length} characters</p>\r\n                {/* <p>{text}</p> */}\r\n            </div>\r\n        </div>\r\n\r\n        \r\n    </>\r\n        \r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alerts(props) {\r\n    return (\r\n          \r\n           <div style={{height:'50px'}}>\r\n           { props.alert && <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\r\n                {props.alert.msg} \r\n               \r\n            </div> }\r\n          \r\n           </div>\r\n    )\r\n}\r\n\r\nexport default Alerts\r\n\r\n","import React from 'react'\r\n\r\nexport default function AboutUs(props) {\r\n\r\n    let mystyle ={\r\n        color: props.mode === 'dark'?'white':'#222f43',\r\n        backgroundColor: props.mode === 'dark'?'#222f43':'white',\r\n      \r\n    }\r\n    return (\r\n\r\n        <div className=\"container\" style={mystyle}>\r\n            <h1 className=\"my-3\">About us</h1>\r\n        <div className=\"accordion \" id=\"accordionExample\">\r\n        <div className=\"accordion-item \">\r\n    \r\n            <h2 className=\"accordion-header\" id=\"headingOne\" style={mystyle}>\r\n                <button className=\"accordion-button\" style={mystyle}  type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                    <strong>Analyze your text</strong>\r\n                </button>\r\n            </h2>\r\n            <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\"  style={mystyle}>\r\n            Textutils gives you a way to analyze your text quickly and efficiently. Be it word count, character count\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingTwo\" style={mystyle}>\r\n            <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                <strong> Free to use </strong>\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={mystyle}>\r\n                TextUtils is a free character counter tool that provides instant character count & word count statistics for a given\r\n                    text. TextUtils reports the number of words and characters. Thus it is suitable for writing text with word/ character\r\n                    limit.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\" >\r\n            <h2 className=\"accordion-header\" id=\"headingThree\" style={mystyle}>\r\n            <button className=\"accordion-button collapsed\" style={mystyle}  type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                <strong>Browser compatable </strong>\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={mystyle}>\r\n               This word counter software works in any web browsers such as Chrome, Firefox, Internet Explorer, safari, Opera. It\r\n               suits to count characters in facebook, blog, books, excel document, pdf document, essays, etc.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n     </div>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport React, { useState } from 'react'\nimport Alerts from './Alerts';\nimport AboutUs from './Components/AboutUs';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nfunction App() {\n\n  const [mode, setmode] = useState('light') ;\n  const [alert, setalert] = useState(null)\n\n  const showAlert = (message) => {\n      setalert({\n          msg: message\n      })\n      setTimeout( ()=> {\n        setalert(null)\n      }, 2000)\n  }\n\n\n  const inversion = () => {\n    if(mode === 'light'){\n      setmode('dark')\n      document.body.style.backgroundColor = '#223045'\n      showAlert('Dark mode enabled')\n    }\n    else{\n      setmode('light')\n      document.body.style.backgroundColor = 'white'\n      showAlert('Light mode enabled')\n    }\n  }\n\n  return (\n    <>\n      <Router>\n      <Navbar title=\"TextUtils\" About=\"About us\"  mode={mode}  toggleMode={inversion} />\n      <Alerts alert={alert} />\n      <div className=\"container\">\n      <Switch>\n          <Route exact path=\"/about\">\n            <AboutUs mode={mode}/>\n          </Route>\n          <Route exact path=\"/\">\n             <TextForm Heading=\"Enter text here\" showAlert={showAlert}  mode={mode} />  \n            {/* <Home /> */}\n          </Route>\n        </Switch>\n            {/* <AboutUs /> */}\n      </div>\n      </Router>\n      \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}